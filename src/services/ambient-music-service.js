const ServiceError = require("../errors/service-error");
const DeviceApis = require("../smartthings-apis/device-apis");
const colorTable = require("../utils/color-table");
const ColorMap = require("../utils/color-table");
//const Player = require('../am-player')
const ESClient = require("./es-client");

module.exports = class AmbientMusicService {
  constructor() {
    this.deviceId = "0b4a112c-feb0-4457-afba-3c859b9f70ad";
    this.component = "main";
    this.accessToken = "b87326ac-2e52-4b27-a41f-04334f4faee9";
    this.deviceApis = new DeviceApis(this.accessToken);
  }
  async start() {
    //1. get color, seconds, uri
    //2. DeviceApi.start(color, seconds)
    //3. player.start(uri)
    //const accessToken = 'b87326ac-2e52-4b27-a41f-04334f4faee9';
    //const deviceApis = new DeviceApis(accessToken);

    let seconds = [10, 15, 20, 25, 30, 35];

    let capability = "colorControl"; //'switchLevel';
    let command = "setColor"; //'setLevel';

    let initCommands = [
      { component: "main", capability: "switch", command: "on", arguments: [] },
      {
        component: "main",
        capability: "switchLevel",
        command: "setLevel",
        arguments: [20],
      },
      {
        component: "main",
        capability: "colorControl",
        command: "setColor",
        arguments: [ColorMap.PURPLE],
      },
    ];
    //data structure
    let tempCommands = [
      { color: { hue: 15, saturation: 85 }, sec: 5 },
      { color: { hue: 68, saturation: 89 }, sec: 7 },
      { color: { hue: 0, saturation: 99 }, sec: 9 },
      { color: { hue: 73, saturation: 99 }, sec: 11 },
    ];
    const times = [
      15.95210884, 15.9753288, 16.09142857, 16.32362812, 16.60226757,
      17.11310658, 17.62394558, 17.92580499, 18.13478458, 18.64562358,
      19.15646259, 19.66730159, 20.17814059, 20.20136054, 20.68897959,
      20.71219955, 20.92117914, 21.17659864, 21.73387755, 22.01251701,
      22.2214966, 22.24471655, 22.75555556, 23.2431746, 23.26639456,
      23.77723356, 24.28807256, 24.79891156, 25.30975057, 25.82058957,
      25.84380952, 26.33142857, 26.35464853, 26.86548753, 27.35310658,
      27.37632653, 27.88716553, 28.16580499, 28.39800454, 28.90884354,
      29.41968254, 29.93052154, 30.18594104, 30.44136054, 30.95219955,
      31.46303855, 31.97387755, 31.99709751, 32.27573696, 32.48471655,
      33.01877551, 33.50639456, 33.52961451, 34.04045351, 34.55129252,
      34.82993197, 35.06213152, 35.57297052, 36.08380952, 36.59464853,
      37.10548753, 37.61632653, 38.15038549, 38.42902494, 38.66122449,
      39.17206349, 39.68290249, 40.1937415, 40.7045805, 41.2154195, 41.7262585,
      42.23709751, 42.74793651, 43.25877551, 43.76961451, 44.30367347,
      44.55909297, 44.81451247, 45.32535147, 45.83619048, 46.34702948,
      46.60244898, 46.85786848, 47.36870748, 47.87954649, 48.13496599,
      48.39038549, 48.64580499, 48.90122449, 49.92290249, 50.45696145,
      50.96780045, 51.22321995, 51.47863946, 51.64117914, 51.98947846,
      52.24489796, 52.50031746, 52.75573696, 53.01115646, 53.26657596,
      53.52199546, 54.03283447, 54.31147392, 54.54367347, 55.05451247,
      55.33315193, 55.58857143, 55.84399093, 56.07619048, 56.35482993,
      56.61024943, 56.86566893, 57.09786848, 57.35328798, 58.14276644,
      58.65360544, 59.16444444, 59.41986395, 59.67528345, 60.18612245,
      60.4647619, 62.76353741, 63.01895692, 63.27437642, 63.52979592,
      64.29605442, 64.80689342, 65.31773243, 65.59637188, 66.33941043,
      67.12888889, 67.36108844, 67.61650794, 67.89514739, 68.40598639,
      68.9168254, 69.4276644, 69.61342404, 69.9385034, 70.4493424, 70.96018141,
      71.47102041, 74.60571429, 75.58095238, 77.50820862, 77.62430839,
      77.85650794, 77.87972789, 78.13514739, 78.64598639, 79.1568254,
      79.6676644, 80.1785034, 80.6893424, 80.71256236, 81.22340136, 81.71102041,
      82.24507937, 82.75591837, 83.26675737, 83.77759637, 84.28843537,
      84.79927438, 85.58875283, 85.82095238, 86.09959184, 86.35501134,
      86.84263039, 87.37668934, 87.88752834, 88.39836735, 88.90920635,
      89.42004535, 89.93088435, 90.44172336, 90.95256236, 91.48662132,
      91.97424036, 92.46185941, 92.99591837, 93.01913832, 93.52997732,
      93.78539683, 93.94793651, 94.04081633, 94.55165533, 95.06249433,
      95.48045351, 95.57333333, 96.59501134, 97.10585034, 97.6399093,
      98.1507483, 98.6615873, 99.1724263, 99.68326531, 99.93868481,
      100.19410431, 100.70494331, 101.21578231, 101.72662132, 102.23746032,
      102.51609977, 103.25913832, 103.76997732, 103.79319728, 104.18793651,
      104.30403628, 104.81487528, 105.32571429, 105.83655329, 106.11519274,
      106.25451247, 106.34739229, 106.85823129, 107.36907029, 107.8799093,
      108.3907483, 109.4124263, 109.69106576, 110.96816327, 111.47900227,
      111.96662132, 112.50068027, 112.73287982, 112.98829932, 113.52235828,
      113.77777778, 114.03319728, 114.28861678, 114.52081633, 114.79945578,
      115.05487528, 115.56571429, 116.09977324, 116.35519274, 116.58739229,
      117.12145125, 117.37687075, 117.88770975, 118.14312925, 118.42176871,
      118.65396825, 119.16480726, 119.67564626, 120.95274376, 121.71900227,
      121.99764172, 122.25306122, 122.76390023, 123.25151927, 123.78557823,
      124.29641723, 124.57505669, 124.80725624, 125.08589569, 125.82893424,
      126.33977324, 126.85061224, 127.87229025, 128.40634921, 128.91718821,
      129.14938776, 129.42802721, 129.93886621, 130.44970522, 130.96054422,
      131.47138322, 131.98222222, 133.00390023, 137.67111111, 151.48698413,
      151.6030839, 151.83528345, 151.8585034, 152.1139229, 153.13560091,
      153.27492063, 154.15727891, 154.64489796, 154.94675737, 155.0860771,
      155.20217687, 155.45759637, 156.22385488, 156.68825397, 157.24553288,
      157.73315193, 158.26721088, 158.75482993, 159.17278912, 159.28888889,
      160.79818594, 161.35546485, 162.37714286, 162.8647619, 163.28272109,
      163.39882086, 163.65424036, 163.90965986, 164.42049887, 164.90811791,
      165.44217687, 165.69759637, 165.86013605, 165.95301587, 166.46385488,
      166.48707483, 166.97469388, 167.25333333, 167.50875283, 167.76417234,
      167.90349206, 168.27501134, 168.53043084, 169.01804989, 169.55210884,
      170.31836735, 170.57378685, 171.59546485, 172.01342404, 172.64036281,
      173.12798186, 173.66204082, 173.91746032, 174.08, 174.14965986,
      174.68371882, 175.17133787, 175.70539683, 176.72707483, 177.21469388,
      177.23791383, 178.02739229, 178.16671202, 178.25959184, 178.79365079,
      179.28126984, 179.8153288, 180.0707483, 180.09396825, 180.23328798,
      180.3261678, 180.8370068, 181.32462585, 181.3478458, 181.85868481,
      182.11410431, 182.36952381, 183.39120181, 184.15746032, 184.41287982,
      185.43455782, 185.96861678, 186.47945578, 186.75809524, 186.99029478,
      187.50113379, 188.01197279, 188.52281179, 189.03365079, 189.5444898,
      190.5661678, 191.10022676, 191.5878458, 191.86648526, 192.12190476,
      192.37732426, 193.14358277, 193.65442177, 194.16526077, 194.67609977,
      194.95473923, 195.69777778, 195.97641723, 197.76435374, 198.27519274,
      198.53061224, 198.78603175, 199.80770975, 200.31854875, 201.34022676,
      201.85106576, 202.38512472, 202.64054422, 202.89596372, 203.10494331,
      203.40680272, 203.91764172, 204.93931973, 205.45015873, 205.96099773,
      206.47183673, 206.98267574, 210.69786848, 210.83718821, 211.09260771,
      211.39446712, 212.13750567, 212.36970522, 214.18086168, 214.97034014,
      215.73659864, 216.22421769, 216.89759637, 219.8000907, 224.42086168,
      230.20263039,
    ];

    // for(const [k, v] of colorTable.entries){

    // }

    this.deviceApis.executeCommands(this.deviceId, initCommands);
    let level = 20;

    for (let i = 0; i < times.length; ++i) {
      const s = times[i];
      const color = tempCommands[i % 4].color;
      setTimeout(() => {
        console.log(`${s} sec  , command : ${command}, color : ${i % 4}`);
        this.deviceApis.executeCommand(
          this.deviceId,
          this.component,
          capability,
          command,
          [color]
        );
      }, s * 1000);
    }
  }
  async getPlayList(plyId) {
    //return Player.getPlayList()
    const esclient = new ESClient();
    const response = await esclient.songIdsByPlaylistId(plyId);
    return response;
    //return ["3URb74mrpnRWY1HtTBEUKH", ...]
  }
  async getMusicInfo(id) {
    const esclient = new ESClient();
    //let id = "5iis9J2sptrUy0VIpFVIg1";
    const response = await esclient.search(id);
    return response;
    //return ["a", "b", "c"];
  }
  async getDeviceStatus() {
    const result = await this.deviceApis.getComponentStatus(
      this.deviceId,
      this.component
    );
    console.log(result);
  }
};